#!/usr/bin/env perl
# Predict item reforge results using the random seed in savefile.json
use strict;
use warnings;
use lib 'lib';
use Grindia;
use JSON qw( decode_json );

die "usage: $0 tier upgrade count\n" if @ARGV < 1 || @ARGV > 3;
my ($tier, $upgrade, $count) = @ARGV;
$count ||= 20;

my $max_tier = 5;
my %upgrade_chance = (
   1 => f32(0.30),
   2 => f32(0.25),
   3 => f32(0.15),
   4 => f32(0.05),
   5 => f32(0.01),
);

my $ctx = Grindia::get_context('data');
my $factory;
$ctx->for_type('ItemFactoryBonusData', sub { $factory = $_[0] });

my $MASK = 0xffffffff;
my ($R0, $R1, $R2, $R3);
{
   open my $IN, '<:utf8', 'savefile.json' or die;
   local $/ = undef;
   my $data = decode_json(<$IN>);
   close $IN;
   $data = decode_json($data->{i_ss});
   $R0 = $data->{s0} & $MASK;
   $R1 = $data->{s1} & $MASK;
   $R2 = $data->{s2} & $MASK;
   $R3 = $data->{s3} & $MASK;
}

for my $i (1 .. $count) {
   if ($upgrade && $tier < $max_tier) {
      $tier++ if float_rand() < $upgrade_chance{$tier};
   }
   my $bonuses = $factory->{"tier$tier"} or die;
   my $bonus = $bonuses->[get_rand() % @$bonuses];
   my $out = "$i: T$tier $bonus->{title}: $bonus->{desc}";
   $out =~ s/\s+/ /g;
   print $out, "\n";
}

sub f32 {
   # kludge: perl doesn't have single-precision floats
   return unpack 'f', pack 'f', $_[0];
}

BEGIN {
my $SCALE = f32(1.0 / 0x7fffff);
sub float_rand {
   return f32((get_rand() & 0x7fffff) * $SCALE);
}
}

sub get_rand {
   my $x = $R0;
   $R0 = $R1;
   $R1 = $R2;
   $R2 = $R3;
   $x ^= ($x << 11) & $MASK;
   $x ^= $x >> 8;
   return $R3 ^= ($R3 >> 19) ^ $x;
}

