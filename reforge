#!/usr/bin/env perl
# Predict item reforge results using the random seed in savefile.json
# First column is the sequence number. Second column is the maximum upgrade
# rank; for example, a 3 will upgrade 3 to 4, 2 to 3, or 1 to 2, but not
# 4 to 5. If the upgrade box is ticked, it consumes two sequence numbers:
# one to check for an upgrade, then a second one for the new bonus.
# Maximum sequence number can be given as a command-line argument.
use strict;
use warnings;
use lib 'lib';
use Grindia;
use JSON qw( decode_json );

die "usage: $0 [count]\n" if @ARGV > 1;
my $count = $ARGV[0] || 20;

my $max_tier = 5;

my $ctx = Grindia::get_context('data');
my (@tiers, @len);
$ctx->for_type('ItemFactoryBonusData', sub {
   my ($obj) = @_;
   for my $tier (1 .. $max_tier) {
      my $bonuses = $obj->{"tier$tier"} or die;
      my @names;
      my $len = 0;
      foreach my $bonus (@$bonuses) {
         my $name = $bonus->{title} or die;
         $name =~ s/\s+/ /g;
         $name =~ s/^ //;
         $name =~ s/ $//;
         $name =~ s/^Tiny /T./;
         $name =~ s/^Lesser /l./;
         $name =~ s/^Small /S./;
         $name =~ s/^Large /L./;
         push @names, $name;
         $len = length($name) if length($name) > $len;
      }
      $tiers[$tier] = \@names;
      $len[$tier] = $len;
   }
});
$len[$max_tier] = 1;

my $MASK = 0xffffffff;
my ($R0, $R1, $R2, $R3);
{
   open my $IN, '<:utf8', 'savefile.json' or die;
   local $/ = undef;
   my $data = decode_json(<$IN>);
   close $IN;
   $data = decode_json($data->{i_ss});
   $R0 = $data->{s0} & $MASK;
   $R1 = $data->{s1} & $MASK;
   $R2 = $data->{s2} & $MASK;
   $R3 = $data->{s3} & $MASK;
}

for my $i (1 .. $count) {
   my $rand = get_rand();
   my $up = upgrade($rand);
   printf "%3d %d", $i, $up;
   for my $tier (1 .. $max_tier) {
      my $names = $tiers[$tier];
      my $name = $names->[$rand % @$names];
      printf " %-*s", $len[$tier], $names->[$rand % @$names];
   }
   print "\n";
}

sub f32 {
   # kludge: perl doesn't have single-precision floats
   return unpack 'f', pack 'f', $_[0];
}

BEGIN {
my $BITS = 0x7fffff;
my $SCALE = f32(1.0 / $BITS);
my $UP1 = f32(0.30);
my $UP2 = f32(0.25);
my $UP3 = f32(0.15);
my $UP4 = f32(0.05);
sub upgrade {
   my ($x) = @_;
   $x = f32(($x & $BITS) * $SCALE);
   return 0 if $x >= $UP1;
   return 1 if $x >= $UP2;
   return 2 if $x >= $UP3;
   return 3 if $x >= $UP4;
   return 4;
}
}

sub get_rand {
   my $x = $R0;
   $R0 = $R1;
   $R1 = $R2;
   $R2 = $R3;
   $x ^= ($x << 11) & $MASK;
   $x ^= $x >> 8;
   return $R3 ^= ($R3 >> 19) ^ $x;
}

